<?php
/**
 * Created by PhpStorm.
 * User: hobbit
 * Date: 10/25/18
 * Time: 1:27 PM
 */

namespace App\Configs;


class Configs
{
    /**
     * Log path
     */
    //  const LOG = '/var/log/applications/ke/core/api/';
    const LOG = '/var/log/applications/{{item.countrycode}}/hub/invoices/';
    /**
     * CONNECTION TO RABBITMQ locally
     */
    const QUEUE_HOST = '{{MQHOST}}';
    const QUEUE_PORT = '{{MQPORT}}';
    const QUEUE_USERNAME = '{{item.applicationconf.mquser}}';
    const QUEUE_PASSWORD = '{{item.applicationconf.mqpassword}}';


    /**
     * Queue Name
     */
    const MESSAGING_QUEUE_NAME = 'IN.{{item.countrycode|upper}}.CPG.MESSAGING';

    /**
     * Exchange name
     */
    const EXCHANGE_NAME = 'IN.{{item.countrycode|upper}}.CPG.EXCHANGE';

    /**
     * Exchange type
     */
    const EXCHANGE_TYPE = 'direct';

    /**
     * Queue durability
     */
    const QUEUE_DURABILITY = 2;

    /**
     * Debug log switch
     */
    const DEBUG_LOG_ON = 1;

    const PASSWORD_STATUS_ID = 1;

    const CAN_ACCESS_UI = 0;

    const ACTIVE = 1;

    const RESTRICT_TO_API_USERS = true;

    const CLIENTID = 1;

    const CLIENT_REDIS_HASH = '{{item.countrycode|upper}}.CLIENT';

    const USER_REDIS_HASH = '{{item.countrycode|upper}}.USER';

    const FAILED_TO_PUBLISH_TO_QUEUE_FILE = '/srv/html-{{item.countrycode}}/hub/crons/retrypublishercron/failedPublishes/failed_publish_records.txt';

    const FAILED_TO_PUBLISH_TO_ACK_PAYMENT_QUEUE_NAME_FILE = '/srv/html-{{item.countrycode}}/hub/crons/retrypublishercron/failedPublishes/failed_publish_ack_queue.txt';

    const MYSQL_DUPLICATE = 1062;

    const MYSQL_DUPLICATE1 = 23000;

    const USER_ACTIVE = 1;

    const CLIENT_ACTIVE = 1;

    const MIN_DATE_CHECK_POST_PAYMENT = "-1 year";

    const DATE_FORMAT = "Y-m-d";

    const DEFAULT_RECEIPT_LANGUAGE = "en";

    const DEFAULT_PAYMENT_ORIGIN = "OTHERS";

    const DEFAULT_PAYMENT_ORIGIN_ID = 5;

    const DEFAULT_LANGUAGE_CODE = "en";

    const DEFAULT_COUNTRY_TIMEZONE = '{{item.countryzone}}';

    const DEFAULT_TIMEZONE = 'UTC';

    const PAYMENT_MODE = 'MOBILE';

    const API_ERRORS_URL = '{{REPORTING_SERVICE_API}}';

    const SERVER_NAME = 'ca1-sd.mau.cellulant.com';

    const DEFAULT_COUNTRY = '{{item.countrycode|upper}}';

    const API_ERRORS_ON = 1;

    /**
     * Connection time out.
     */
    const CONNECTION_TIMEOUT = 5000;

    const APPLICATION_NAME = 'Invoice_API';

    const POST_PAYMENT_MAXIMUM_LIMIT = 500;

    /**
     * Merchant tier mappings.
     * This maps the merchant tier code to the merchant tier ID
     */
    public static $MERCHANT_TIERS = [
        "A" => 1,
        "B" => 2,
        "C" => 3,
    ];

    const INACTIVE_STATE = 3;

    /**
     * Mula APP failed payment message
     */
    static $APP_NOTIFICATION_PAYMENT_ORIGIN = [1, 2];

    /**
     * Mula APP failed payment message
     */
    const IMPLICIT_ATTRIBUTE_FOR_MULA_APP = 66;

    const IS_REMINDER = 2;

    const IS_APP_NOTIFICATION = 1;

    const MAX_NOTIFICATION_RETRIES = 5;

    /**
     * Mula APP failed payment message
     */
    const MULA_FAILED_PAYMENT = "Failed (Not Charged)";

    const FETCH_PAYMENTS_MAXIMUM_LIMIT = 500;

    const FETCH_PAYMENTS_DEFAULT_LIMIT = 50;

    const MAX_BATCH_COUNT = 500;

    /**
     * Limit for database unique fetch.
     *
     * @var int
     */
    const FETCH_UNIQUE_RESULT = 1;

    /**
     * Request Origin Code that is mula app
     */
    const MULA_APP_PAYMENT_ORIGIN = "MULA_APP";

    /**
     * Request Origin Code that is mula web
     */
    const MULA_WEB_PAYMENT_ORIGIN = "MULA_WEB";

    /**
     * *bulk sms username
     * *
     * */
    const BULK_SMS_USERNAME = "cpgSysUser";

    /**
     * * bulk sms password
     * */
    const BULK_SMS_PASSWORD = "Mkubw@101";

    /**
     * Location of the bulk sms credit consumption url
     */
    const BULK_SMS_URL = "http://localhost/simulations/raiseinvoice/smsCredits.php";

    /**
     * Internal application users that can post on behalf of external clients.
     *
     * The format of the string is a comma separated values where the values are
     * userIDs of the application that should be in the DB. EG. "3,3,4"
     *
     * @var string
     */
    const APPLICATION_USERS_WHITELIST = "70,233,122,1053,1163,1,1215,994";

    /**
     * Payment without presentment service constant.
     *
     * @var int
     */
    const PAYMENT_WITHOUT_PRESENTMENT_SERVICE = 2;

    /**
     * The default client id to be used if a clientID was not passed in the request
     */
    const CELLULANT_CLIENT_ID = 1;

    /**
     * Merchants that will be affected by the equitel specific templates
     *
     * @var array
     */
    public static $EQUITEL_TEMPLATE_CHANGE_MERCHANTS = array(
        "ADE");

    /**
     * Regex used to identify equitel numbers
     *
     * @var string
     */
    const EQUITEL_MSISDN_REGEX = "^(25476)([0-9]{7})$";

    /**
     * Equitel ClientCode
     *
     * @var string
     */
    const EQUITEL_CLIENT_CODE = "EQUITEL";

    /**
     * The number of times a notification message can be retried.
     *
     * @var int
     */
    const PROFILE_ENROLLMENT_TYPE_ID = 3;

    /**
     * ActionID for Presentment action as stored in the DB.
     *
     * @var int
     */
    const PRESENTMENT_ACTION_ID = 1;

    /**
     * Default lower limit for fetch invoices.
     *
     * @var int
     */
    const FETCH_INVOICES_DEFAULT_LIMIT = 50;

    /**
     * Default upper limit for fetch invoices.
     *
     * @var int
     */
    const FETCH_INVOICES_MAXIMUM_LIMIT = 500;

}